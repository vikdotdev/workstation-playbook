#!/bin/bash
# Author: Viktor Habchak, @vikdotdev at github.com
#
# This script is intended to quick-install my setup on Fedora 34 workstation.
# TODO install vpn / make a flatpak?
# TODO install lightdm, remove gdm? add config and autostart service
# TODO install ninja build system (for lua ls)

# install backlight control to /etc/X11/xorg.conf
# Section "Device"
#     Identifier  "Intel Graphics"
#     Driver      "intel"
#     Option      "Backlight"  "intel_backlight"
# EndSection

NEW_HOSTNAME=pad # default hostname
LOG_DIR=~/.local/share/plonk
LOG_PATH="$LOG_DIR/output.log"

while [[ $# -gt 0 ]]; do
  key="$1"

  case $key in
      -d|--desktop)
      NEW_HOSTNAME=umbra
      shift
      shift
      ;;
      -l|--laptop)
      NEW_HOSTNAME=pad
      shift
      shift
      ;;
      *)
      shift
      ;;
  esac
done

read -sp 'Password: ' PASSWORD
echo

function skip {
  echo "PLONK >>> $1. Skipping" | tee -a $LOG_PATH
}

function print {
  echo "PLONK >>>" "$@" | tee -a $LOG_PATH
}

function execute {
  echo "[$(date +%D-%T)] $@" >> $LOG_PATH
  {
    eval "$@"
  } &>> $LOG_PATH
}

function execute-with-password {
  echo "[$(date +%D-%T)] sudo $@" >> $LOG_PATH
  {
    eval "echo $PASSWORD | sudo --stdin $@"
  } &>> $LOG_PATH
}

function exit-if-run-as-sudo {
  if [ $EUID -eq 0 ]; then
    print "Script is meant to be run without sudo. Aborting"
    exit 1
  fi
}

function check-password-correctness {
  sudo -k
  [ -z "$PASSWORD" ] && print 'Password is empty. Aborting' && exit 1

  local INCORRECT=1

  {
    echo "$PASSWORD" | sudo -S -v &> /dev/null && INCORRECT=0
  } > /dev/null

  if [ "$INCORRECT" -eq 1 ]; then
    print "Incorrect password. Aborting"
    exit 1
  fi
}

function prepare-log-directory {
  mkdir -p $LOG_DIR

  print "Installation logs are stored in $LOG_DIR"
  print 'watch -n 0.5 tail -n $(tput cols) [path]' $LOG_PATH
}

function update-packages {
  print 'updating packages'

  execute-with-password "dnf update -y"
}

function install-dotfiles-dependencies {
  print 'installing dotfiles dependencies'

  # ShellCheck editorconfig replaced by TS
  execute-with-password "dnf install -y stow neovim imwheel wget unzip xclip git curl clang git-credential-libsecret sensible-browser xdotool rofi ripgrep fd-find git-delta screenkey compton aspell aspell-en"

  prepare-neovim-undo
  install-tmux
  install-xcape
  install-github-cli
  install-nodejs
  install-ruby
  install-awesome

  execute-with-password "dnf install -y vim stow imwheel wget unzip xclip git curl clang git-credential-libsecret snapd sensible-browser xdotool git-delta screenkey compton stack redshift urlview xbacklight"
  execute-with-password "ln -s /var/lib/snapd/snap /snap"
  curl -fsSL https://deno.land/x/install/install.sh | sh
}

function prepare-neovim-undo {
  mkdir -p .local/share/nvim/undo
}

function install-tmux {
  print "installing tmux"

  if [ -d "$HOME/.tmux" ]; then
    skip "$HOME/.tmux found"
  else
    execute-with-password "dnf install -y tmux"
    execute "cd"
    execute "rm -r ~/.tmux"
    execute "git clone https://github.com/gpakosz/.tmux.git"
    execute "ln -s -f .tmux/.tmux.conf"
  fi
}

function install-xcape {
  print 'building xcape'

  if [ -x "$(command -v xcape)" ]; then
    skip 'xcape binary found'
  else
    execute '[ ! -d "$HOME/Repositories" ] && mkdir ~/Repositories'
    execute "cd ~/Repositories"
    execute "git clone https://github.com/alols/xcape.git"
    execute-with-password "dnf install git gcc make pkgconfig libX11-devel libXtst-devel libXi-devel cmake -y"
    execute "cd xcape"
    execute "make"
    execute-with-password "make install"
  fi
}

function install-github-cli {
  execute-with-password "dnf config-manager --add-repo https://cli.github.com/packages/rpm/gh-cli.repo"
  execute-with-password "dnf install -y gh"
}

function install-nodejs {
  print "installing node & yarn"

  if [ -x "$(command -v yarn)" ]; then
    skip "yarn binary found"
  else
    {
      YARN_REPO=$(curl --silent --location https://dl.yarnpkg.com/rpm/yarn.repo)

      echo $PASSWORD | sudo --stdin true && echo "$YARN_REPO" | sudo tee /etc/yum.repos.d/yarn.repo
    } > /dev/null

    execute-with-password "dnf install yarn -y"
  fi

  install-npm-dotfiles-dependencies
}

function setup-npm-path {
  print "setting up npm path"

  if [ -x "$(command -v npm)" ] && [ ! -d ~/.npm-global ]; then
    execute "mkdir ~/.npm-global"
    execute "npm config set prefix '~/.npm-global'"
    execute "export PATH=~/.npm-global/bin:$PATH"
  else
    skip "npm binary not found"
  fi
}

function install-npm-dotfiles-dependencies {
  print "installing npm dotfiles dependencies"

  if [ -x "$(command -v npm)" ]; then
    setup-npm-path
    execute "npm install -g js-beautify stylelint marked vscode-json-languageserver bash-language-server vscode-langservers-extracted sql-language-server yaml-language-server dockerfile-language-server-nodejs diagnostic-languageserver"
  else
    skip "npm binary not found"
  fi
}

function install-ruby {
  print "installing ruby dependencies"

  execute-with-password "dnf install -y patch autoconf automake bison glibc-headers libffi-devel libtool libyaml-devel patch readline-devel sqlite-devel zlib-devel openssl-devel glibc-headers"

  print "installing rvm"

  if [ -x "$(command -v rvm)" ]; then
    skip "rvm binary found"
  else
    execute "\curl -sSL https://get.rvm.io | bash"
    execute "source ~/.rvm/scripts/rvm"
  fi

  print "building ruby"

  if [ -x "$(command -v ruby | grep ~/.rvm/rubies)" ]; then
    skip "ruby rvm binary found"
  else
    execute "rvm autolibs disable"
    execute "rvm install ruby 3"
    execute "rvm use 3 --default"
  fi

  print "installing gems"

  if [ -x "$(command -v gem)" ]; then
    execute "gem install bundler"
    execute "gem install tmuxinator"
    execute "gem install solargraph"
    execute "gem install pry-doc"
  fi
}

function install-awesome {
  execute-with-password "dnf install -y awesome playerctl"
}

function install-dotfiles {
  print "installing dotfiles"

  if [ -d "$HOME/Repositories/dotfiles" ]; then
    skip "~/Repositories/dotfiles found"
  else
    execute '[ ! -d "$HOME/Repositories" ] && mkdir ~/Repositories'
    execute "cd ~/Repositories"
    execute "git clone https://github.com/vikdotdev/dotfiles"

    execute "cd"
    execute '[ -s "$HOME/.profile" ] && mv .profile .profile.default'
    execute '[ -s "$HOME/.bash_profile" ] && mv .bash_profile .bash_profile.default'
    execute '[ -s "$HOME/.bashrc" ] && mv .bashrc .bashrc.default'
    execute '[ -s "$HOME/.inputrc" ] && mv .inputrc .inputrc.default'
    execute 'cd && ./Repositories/dotfiles/bin/bin/s-dotfiles-sync'
  fi
}

function install-packages {
  print 'installing rpmfusion'

  execute-with-password 'dnf install -y https://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpm'
  execute-with-password 'dnf install -y https://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E fedora).noarch.rpm'
  execute-with-password "dnf groupupdate Multimedia -y"

  install-misc-packages
  install-npm-packages
  install-gui-packages
  install-postgres
  install-redis
  # install-docker
  # install-elasticsearch
}

function install-misc-packages {
  execute-with-password 'dnf install -y redshift peek ncdu tldr syncthing'
}

function install-npm-packages {
  print "installing npm packages"

  if [ -x "$(command -v npm)" ]; then
    setup-npm-path
    execute "npm install -g @bitwarden/cli ngrok"
  else
    skip "npm binary not found"
  fi
}

function install-gui-packages {
  print 'installing gui packages'

  # TODO this needs sudo
  flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo

  execute-with-password "dnf install -y thunderbird deluge skypeforlinux"
  flatpak install flathub org.telegram.desktop
  flatpak install flathub com.spotify.Client
  flatpak install flathub com.github.IsmaelMartinez.teams_for_linux
  # flatpak install flathub com.microsoft.Teams
  execute-with-password "dnf install https://zoom.us/client/latest/zoom_x86_64.rpm"
}

function install-postgres {
  print "installing postgres"

  execute-with-password "dnf install -y postgresql-server postgresql-contrib libpq-devel"
  execute-with-password "systemctl enable postgresql"
  execute-with-password "postgresql-setup --initdb --unit postgresql"
  execute-with-password "systemctl start postgresql"
  execute-with-password "-u postgres createuser $USER -s"
  execute createdb
  execute-with-password "-u postgres psql -c \"ALTER USER $USER WITH PASSWORD 'password';\""
}

function install-redis {
  print "installing redis"

  execute-with-password "dnf install redis -y"
  execute-with-password "systemctl start redis.service"
  execute-with-password "systemctl enable redis.service"
}

# UNFINISHED make sure this runs on latest kernel
# function install-docker {
#   execute-with-password "dnf -y install dnf-plugins-core"
#   execute-with-password "tee /etc/yum.repos.d/docker-ce.repo<<EOF
#   [docker-ce-stable]
#   name=Docker CE Stable - \$basearch
#   baseurl=https://download.docker.com/linux/fedora/34/\$basearch/stable
#   enabled=1
#   gpgcheck=1
#   gpgkey=https://download.docker.com/linux/fedora/gpg
#   EOF"
#   execute-with-password "dnf makecache"
#   execute-with-password "dnf install -y docker-ce docker-ce-cli containerd.io docker-compose"
#   execute-with-password "sudo curl -L https://raw.githubusercontent.com/docker/compose/master/contrib/completion/bash/docker-compose -o /etc/bash_completion.d/docker-compose"
#   execute-with-password "systemctl enable --now docker"
#   execute-with-password "usermod -aG docker $(whoami)"
#   execute "newgrp docker"
# }

# function install-elasticsearch {
#   # TODO change to docker
#   execute "podman pull docker.io/library/elasticsearch:7.9.2"
#   execute "podman run -d --name elasticsearch7 -p 9200:9200 -p 9300:9300 -e \"discovery.type=single-node\" elasticsearch:7.9.2"
# }

function install-fonts {
  print "installing iosevka"

  font_files=$(ls ~/.fonts/iosevka-* 2> /dev/null | wc -l)
  if [ "$font_files" != "0" ]
  then
    skip "~/.fonts/iosevka-* found"
  else
    execute "cd ~/Downloads"
    execute "wget --no-verbose --show-progress --progress=bar:force https://github.com/be5invis/Iosevka/releases/download/v3.0.0-rc.5/07-iosevka-curly-3.0.0-rc.5.zip"
    execute "mkdir ~/.fonts"
    execute "command -v unzip && unzip 07-iosevka-curly-3.0.0-rc.5.zip 'ttf/*' -d ~/.fonts/"
    execute "cd ~/.fonts && mv ttf/* . && rm -rf ttf"
  fi
}

function install-wallpapers {
  # TODO populate
  mkdir -p .local/share/wallpapers
}

function update-hostname {
  print "changing hostname"

  execute "hostnamectl set-hostname $NEW_HOSTNAME"
}

function install-kmonad {
  if [ -x "$(command -v kmonad)" ]; then
    skip 'kmonad binary found'
  else
    execute-with-password "usermod -aG input $USER"
    execute-with-password "groupadd uinput"
    execute-with-password "usermod -aG uinput $USER"
    echo 'KERNEL=="uinput", MODE="0660", GROUP="uinput", OPTIONS+="static_node=uinput"' | execute-with-password "tee /etc/udev/rules.d/90-uinput.rules"

    # This seems to be needed because uinput isn't compiled as a loadable module these days.
    # See https://github.com/chrippa/ds4drv/issues/93#issuecomment-265300511
    echo uinput | execute-with-password "tee /etc/modules-load.d/uinput.conf"

    execute '[ ! -d "$HOME/Repositories" ] && mkdir ~/Repositories'
    execute "cd ~/Repositories"
    execute "git clone https://github.com/kmonad/kmonad.git"
    execute "cd kmonad"

    execute "stack install"
    execute "systemctl --user start --now kmonad.service"
  fi
}

function run-services {
  execute "systemctl --user start --now redshift.service"
}

function main {
  exit-if-run-as-sudo
  prepare-log-directory
  update-hostname
  update-packages
  install-dotfiles-dependencies
  install-dotfiles
  install-packages
  install-fonts
  install-kmonad
  run-services
  install-wallpapers

  print "Done."
}

main

function post-install {
  # do postinstall stuff e.g. docker
}
